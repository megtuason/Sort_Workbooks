---
uti: com.xamarin.workbook
id: 5103bf67-41f5-4c76-897f-8646db555b9c
title: Midterms
platforms:
- Console
---

```csharp
//Linear Search
int[] Array = {1, 3, 5, 7, 9, 11};
public int LinearSearch(int[] arraypls, int input)
{
    for (int i = 0; i < arraypls.Length; i++)
    {
        if (input == arraypls[i])
        {
            return i;
        }
    }
    return -1;
}
LinearSearch(Array, 11);
```

```csharp
//Linear Search using Recursion
int[] Array = {1, 3, 5, 7, 9, 11};
public int LinearSearch(int[] arraypls, int input, int start)
{
    if (start == arraypls.Length)
    {
        return -1;
    }
    else if (input == arraypls[start])
    {
        return start;
    }
    return LinearSearch(arraypls, input, start+1);
}
LinearSearch(Array, 1, 0);
```

```csharp
// Binary Search
int[] Array = {1, 3, 5, 7, 9, 11, 13};
public int BinarySearch(int[] arraypls, int input)
{
    int start = 0;
    int end = arraypls.Length-1;
    for (int i = 0; i < arraypls.Length; i++)
    {
        int mid = (start + end)/2;
        if (arraypls[mid] == input)
        {
            start = 0;
            end = arraypls.Length-1;
            return mid;
        }
        else if (arraypls[mid] > input)
        {
            end = mid-1;
        }
        else if (arraypls[mid] < input)
        {
            start = mid+1;
        }
    }
    return -1;
}
BinarySearch(Array, 1);
```

```csharp
//Binary Search using Recursion
int[] Array = {1, 3, 5, 7, 9, 11, 13};
public int BinarySearch(int[] arraypls, int input, int start, int end)
{
    int mid = (start + end)/2;
    if (input == arraypls[mid])
    {
        return mid;
    }
    else if (start == end)
    {
        return -1;
    }
    else if (arraypls[mid] < input)
    {
        start = mid+1;
        return BinarySearch(arraypls, input, start, end);
    }
    else if (arraypls[mid] > input)
    {
        end = mid-1;
        return BinarySearch(arraypls, input, start, end);
    }
    return -1;
}
BinarySearch(Array, 13, 0, Array.Length);
```

```csharp
//Bubble Sort
int [] a = {2, 3, 16, 23, 0, -1, 34};
public int [] BubbleSort(int[] myList)
{
    for (int i = 0; i < myList.Length-1; i++)
    {
        for (int z = 0; z < myList.Length-1; z++)
        {
            if (myList[z] > myList[z+1])
            {
                int old = myList[z];
                myList[z] = myList[z+1];
                myList[z+1] = old;
            }
        }
    }
    return myList;
}
for (int i = 0; i < a.Length; i++)
{
    Console.Write(BubbleSort(a)[i] + " ");
}
```

```csharp
//Bubble Sort using Recursion
int [] a = {2, 3, 16, 23, 0, -1, 34};
public int [] BubbleSort(int [] myList, int counter)
{
    if (counter == a.Length)
    {
        return myList;
    }
    else if (a[counter] > a[counter+1])
    {
        int old = a[counter];
        a[counter] = a[counter+1];
        a[counter+1] = old;
    }
    return BubbleSort(myList, counter+1);
}
for (int i = 0; i < a.Length; i++)
{
    Console.Write(BubbleSort(a)[i] + " ");
}
```

```csharp
//Midterm Review - Sum of all Squares
public int RecursionAdd(int x)
{
    int sum = 0;
    sum = sum + x * x;
    if (x == 0)
    {
        return 0;
    }
    return RecursionAdd(x-1) + sum;
}
Console.Write(RecursionAdd(5));
```

```csharp
//Midterm Review - Linear Search
string [] help = {"every", "espresso", "beverage", "we", "handcraft", "for", "you", "starts", "with"};
public int LinearSearch(string[] myList, string v)
{
    for (int i = 0; i < myList.Length; i++)
    {
        if (myList[i] == v)
        {
            return i;
        }
    }
    return -1;
}
Console.Write(LinearSearch(help, "starts"));
```

```csharp
//Midterm Review - Binary Search
string [] help = {"apple", "banana", "cherry", "durian", "kiwi", "mango", "orange", "strawberry", "tomato"};
public int BinarySearch(string [] myList, string v)
{
    int start = 0;
    int end = myList.Length-1;
    int target = ((int) + v[0]);
    for (int i = 0; i < myList.Length-1; i++)
    {
        int mid = (start + end)/2;
        int helpme = ((int) + myList[mid][0]);
        if (myList[mid] == v)
        {
            return mid;
        }
        else if (target > helpme)
        {
            start = mid+1;
        }
        else if (target < helpme)
        {
            end = mid-1;
        }
    }
    return -1;
}
BinarySearch(help, "cherry");
```

```csharp
//Midterm Review - Bubble Sort
int [] Array = {12, 42, 57, 14, 63, 83, 24, 47, 74};
public int[] BubbleSort(int[] arr)
{
    for (int i = 0; i < arr.Length-1; i++)
    {
        for (int z = 0; z < arr.Length-1; z++)
        {
            if (arr[z] > arr[z+1])
            {
                int old = arr[z];
                arr[z] = arr[z+1];
                arr[z+1] = old;
            }
        }
    }
    return arr;
}
for (int i = 0; i < Array.Length; i++)
{
    Console.Write(BubbleSort(Array)[i] + " ");
}
```

```csharp
//Midterm Review - Reverse Array 
int [] Array = {12, 14, 24, 42, 47, 57, 63, 74, 83};
int [] NewArr = new int [Array.Length];
int help = 0;
for (int i = Array.Length-1; i >= 0; i--)
{
    NewArr[help] = Array[i];
    help++;
}
for (int i = 0; i < Array.Length; i++)
{
    Console.Write(NewArr[i] + " ");
}
```

```csharp
//Midterm Review - Square of all odd numbers
int [] Array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int [] NewArr = new int [Array.Length];
int help = 0; 
for (int i = 0; i < Array.Length-1; i++)
{
    if (Array[i] % 2 != 0)
    {
        int square = Array[i] * Array[i];
        NewArr[help] = square;
        help++;
    }
}
for (int i = 0; i < Array.Length; i++)
{
    Console.Write(NewArr[i] + " ");
}
```

```csharp
//Midterm Review - Euclidean XD
public int Euclidean(int point1, int point2, int point3, int point4)
{
    int x = sqrt(((point4 - point2) * (point4-point2)) + ((point3 - point1) * (point3 - point1)));
    return x;
}
public int Perimeter()
{
    

}
```